===== CallbackTutorial.js =====
import {useCallback, useState} from 'react';
import Child from './Child';

export default function CallBackTutorial() {
	const [toggle, setToggle] = useState(false);
	const [data, setData] = useState("Yo, pls sub to the channel");
	
	const returnComment = useCallback(
		(name) => {
			return data + name;		
		},
		[data]
	);
	
	return (
		<div className="App">
			<Child returnComment={returnComment} />
			
			<button 
				onClick={() => {
					setToggle(!toggle)
				}}
			>
			{" "}
			Toggle
			</button>
			{toggle && <h1> toggle </h1>}
		</div>
	);
}

===== Child.js =======  
import React, {useEffect} from 'react';

function Child({ returnComment }) {
	useEffect( ()=> {
		console.log("useEffect called")
	}, [returnComment]);
	
	return <div>{returnComment("Pedro")}</div>
}

export default Child;

====== LayoutEffectTutorial.js ======
import { useLayoutEffect, useEffect, useRef } from 'react';

function LayoutEffectTutorial() {
	const inputRef = useRef(null);
	
	useLayoutEffect( () => {
		console.log(inputRef.current.value);
	}, []);
	
	return (
		<div className="App">
			<input ref={inputRef}
					value={"Pedro"}
					style={{ width:400, height: 60}}
		>
		</div>
	);
}

export default LayoutEffectTutorial;

==== react-hooks-course\src\UseReducer\ReducerTutorial.js =====
import React, {useReducer} from 'react';
const reducer = (state, action) => {
	switch (action.type) {
		case "INCREMENT":
			return { count: state.count + 1, showText: state.showText };
		case "toggleShowText":
			return { count: state.count + 1, showText: !state.showText };
		default:
			return state;
	}
}

const ReducerTutorial = () => {
	const [state, dispatch] = useReducer(reducer, { count: 0, showText: true}));
	return (
		<div>
			<h1> {state.count} </h1>
			<button 
				onClick={() => {
					dispatch({ type: "INCREMENT"});
					dispatch({ type: "toggleShowText"});
				}}
			>
				Click here
			</button>
			
			{state.showText && <p> This is a text</p>}
		</div>	
	);
};

export default ReducerTutorial;

==== react-hooks-course\src\UseRef\RefTutorial.js =====
import React, { useRef } from 'react';

function RefTutorial() {
	const inputRef = useRef(null);
	
	const onClick = () = {
		inputRef.current.value = "";
	};
	
	return (
		<div>
			<h1> NK </h1>
			<input type="text" placeholder="Ex..." ref={inputRef} />
			<button onClick={onClick}> Change Name </button>
		</div>
	);
}

export default RefTutorial;

==== react-hooks-course\src\UseMemo\MemoTutorial.js =====
import axios from 'axios';
import { useEffect, useState, useMemo} from 'react';

export default function MemoTutorial() {
	const [data, setData] = useState(null);
	const [toggle, setToggle] = useState(false);
	
	useEffect(() => {
		axios.get("https://jsonplaceholder.typicode.com/comments");
		.then((response) => {
			setData(response.data);
		});
	}, []);
	
	const findLongestName = (comments) => {
		if(!comments) return null;
		
		let longestName = "";
		for(let i = 0; i < comments.length; i++){
			let currentName = comments[i].name;
			if(currentName.length > longestName.length){
				longestName = currentName;
			}
		}
		
		console.log("This was computed");
		
		return longestName;
	}
	
	const getLongestName = useMemo(() => findLongestName(data), [toggle]);
	
	return (
		<div className="App">
			<div> {getLongestName} </div>
		
			<button
				onClick={() => {
					setToggle(!toggle);
				}}
			>
				{" "}
				Toggle
			</button>
			{toggle && <h1> toggle </h1>}
		</div>
	);
}

====== src\UseImperativeHandle\Button.js =====
import React, { forwardRef, useImperativeHandle, useState } from 'react';

const Button = forwardRef((props, ref) => {
	const [toggle, setToggle] = useState(false);
	
	useImperativeHandle(ref, () => ({
		alterToggle() {
			setToggle(!toggle);
		},	
	}));
	
	return (
		<>
			<button> Button From Child </button>
			{toggle && <span> Toggle </span>}
		</>
	)];
});

return default Button;

===== react-hooks-course\src\UseImperativeHandle\ImperativeHandle.js ======
import React, { useRef } from 'react';
import Button from './Button';

function ImperativeHandle(){
	const buttonRef = useRef(null);
	
	return (
		<div>
			<button
				onClick={ () => {
					buttonRef.current.alterToggle();
				}}
			>
			Button From Parent
			</button>
			<Button ref={buttonRef} />
		</div>	
	);
}

export default ImperativeHandle;

=====  react-hooks-course\src\UseContext\ContextTutorial.js === 
import React, { useState, createContext } from 'react';
import Login from './Login';
import User from './User';

export const AppContext = createContext(null);

function ContextTutorial() {
	const [username, setUsername] = useState("");
	
	return (
		<AppContext.Provider value={{ username, setUsername}}> 
			<Login /> <User />
		</AppContext.Provider>
	);
}

export default ContextTutorial;

===== react-hooks-course\src\UseContext\Login.js =====
import React, { useContext } from 'react';
import { AppContext } from './ContextTutorial';

function Login() {
	const { setUsername } = useContext(AppContext);
	
	return (
		<div>
			<input 
				onChange={(event) => {
					setUserName(event.target.value);
				}}
			/>	
		</div>
	);
}

export default Login;

===== react-hooks-course\src\UseContext\User.js =====
import React, { useContext } from 'react';
import { AppContext } from './ContextTutorial';

function User() {
	const { username } = useContext(AppContext);

	return (
		<div>
			<h1> User: {username} </h1>
		</div>
	);
}

export default User;

==== react-hooks-course\src\UseState\StateTutorial.js =====
import React, { useState } from 'react';

const StateTutorial = () => {
	const [inputValue, setInputValue] = useState("Niraj");
	
	let onChange = (event) => {
		const newValue = event.target.value;
		setInputValue(newValue);
	};

	return (
		<div>
			<input placeholder="enter something..." onChange={onChange} />
			{inputValue}
		</div>
	);
};

export default StateTutorial

===== react-hooks-course\src\App.js ========
import "./App.css";
import EffectTutorial from "./UseEffect/EffectTutorial";
import ReducerTutorial from "./UseReducer/ReducerTutorial";
import StateTutorial from "./UseState/StateTutorial";
import ContextTutorial from "./UseContext/ContextTutorial";
import ImperativeHandle from "./UseImperativeHandle/ImperativeHandle";
import RefTutorial from "./UseRef/RefTutorial";
import MemoTutorial from "./UseMemo/MemoTutorial";
import CallBackTutorial from "./UseCallback/CallbackTutorial";
import LayoutEffectTutorial from './UseLayoutEffect/LayoutEffectTutorial';

function App() {
  return (
    <div className="App">
      <ReducerTutorial />
    </div>
  );
}

export default App;
